Pokud jde o specifikaci toho updatePSPviaAPI, představoval bych si to v zásadě takto:¨

Na vstupu je "zazipovaný" PSP balíček, jehož OCR chci vylepšit a doplnit o ALTO XML.
Skript by měl:
1) dotyčný balíček rozbalit,
2) složku s archivními obrazovými soubory (MC=master copy) zkonvertovat do JPG. Ideálně s co nejmenší kompresí kvůli udržení vysoké obrazové kvality, ale velikost jednotlivého obrázku by neměla přesáhnout limit 8MB nastavený na serverech PERO.
3) vytvořit seznam souborů (-l  *.txt) pro skript post_ocr_request.py
4) následovala by manuální? volba OCR enginu (-e), zadání API klíče (-a), automaticky vyplnění API URL (-u) a cesta k adresáři s JPG obrázky (-d)
5) zapamatovat si přidělené request ID
6) automaticky vyplnit komponenty pro retrieve_ocr_results.py: API URL (-u), API klíč (-a), cesta pro výstup (-o), request ID (-i) a nastavení druhu výstupních souborů [--alto] [--txt]
7) vygenerovat "zprávu" o kvalitě provedeného OCR, tj. vyhodnotit kvalitu nového OCR s využitím vnitřního měření PERO (podle CC=character confidence nebo WC=word confidence) pro každou stránku (0-100% / 0.00-1,00), výsledek seřadit od nejhorší hodnoty po nejlepší (nebo sloupcový graf/křivku pro přehlednost? - to už je asi velká rozmařilost:-), také aritmetický průměr (nebo medián?) pro celou dávku - zkrátka report, co by pomohl vytvořit si nejlepší obrázek o kvalitě použitého OCR modelu (enginu) 
8) nahradit TXT, ALTO a celé zabalit do validního PSP balíčku;-)

Bylo by ale do budoucna fajn, kdyby bylo možné to, o čem jsme se bavili po telefonu, aby PERO API mělo i jakýsi automatický "archivní" engine, který by zaslané obrázky jeden po druhém rozsekal layout detektorem na řádky a každý jednotlivý řádek zkusil přečíst různými modely, vyhodnotil úspěšnost a pak pro přečtení použil ten s nejvyšším (CC/WC). Nevím, jak spolehlivě by fungovaly sondy jen na několika stránkách, protože nikdy nevíš, na jaké dokumenty v archivu narazíš (různé kombinace: tištěná latinka-fraktura, psaná latinka-kurent...a klidně všechny najednou na jednom papíře). To by vážně chtělo, aby si to PERO zkoušelo už na úrovni řádků. Ale jak to zefektivnit tak, aby nemuselo tupě číst každý řádek za sebou třeba pěti různými modely, to nevím. Nepomohlo by strojové učení, které by se naučilo rozeznávat typy písma a vždycky by nejdřív předřadilo ty modely, které fungují nejlépe na odhadnutý typ písma? Kdyby výsledek čtení byl stoprocentní, už by na daný řádek další modely neposílal a šel by na další... Tohle bych chtěl zítra a pozítří probrat s Michalem...
